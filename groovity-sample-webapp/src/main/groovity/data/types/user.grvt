/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
 
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import java.security.MessageDigest;
import java.security.SecureRandom

static conf=[
	source:'sql',
	ttl:'5',
	refresh:'3',
	'sql.tableName':'users',
	'sql.dataSource' : 'sampleDB'
]

//Domain model: a user
class User implements DataModel, Stored, HasRowId, CreatedModified{
	String userName;
	byte[] digest;
	byte[] secretKey;
	
	@ModelSkip public Key getSigningKey(){
		if(secretKey){
			return new SecretKeySpec(decryptSecretKey(),"HmacSHA256");
		}
	}
	
	public Collection listNotes(){
		load('/data/factory')('note',"userId=${id}")
	}
	
	public void digestPassword(String password){
		def db = MessageDigest.getInstance("MD5").digest("${userName}:${load('/authPolicy').web.auths[0].realm}:${password}".bytes)
		digest = load('/groovity/crypto').encrypt(db)
	}
	
	public byte[] decryptDigest(){
		load('/groovity/crypto').decrypt(digest)
	}
	
	public void encryptSecretKey(byte[] secretKey){
		this.secretKey = load('/groovity/crypto').encrypt(secretKey)
	}
	
	public byte[] decryptSecretKey(){
		load('/groovity/crypto').decrypt(secretKey)
	}
	
	User store(){
		if(!secretKey){
			//auto-generate signing key
			def rawKey = new byte[32];
			new SecureRandom().nextBytes(rawKey);
			encryptSecretKey(rawKey)
		}
		CreatedModified.super.store()
	}
}

new User()